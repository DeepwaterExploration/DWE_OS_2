/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/wifi/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the WiFi Status */
        get: operations["wifi_status_wifi_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wifi/access_points": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the scanned access points */
        get: operations["access_points_wifi_access_points_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wifi/connections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the known WiFi connections list */
        get: operations["list_wifi_connections_wifi_connections_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wifi/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Connect to a network */
        post: operations["connect_wifi_connect_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wifi/disconnect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Disconnect from the connected network */
        post: operations["disconnect_wifi_disconnect_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wifi/forget": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Forget a network */
        post: operations["forget_wifi_forget_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wired/get_ip_configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the ethernet IP configuration */
        get: operations["get_ip_configuration_wired_get_ip_configuration_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wired/set_ip_configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update the ethernet IP configuration */
        post: operations["set_static_ip_wired_set_ip_configuration_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wired/set_network_priority": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set the network priority */
        post: operations["set_network_priority_wired_set_network_priority_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wired/get_network_priority": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the network priority */
        get: operations["getet_network_priority_wired_get_network_priority_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all devices */
        get: operations["get_devices_devices_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices/configure_stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Configure a stream */
        post: operations["configure_stream_devices_configure_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices/unconfigure_stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Unconfigure a stream */
        post: operations["unconfigure_stream_devices_unconfigure_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices/set_nickname": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set a device nickname */
        post: operations["set_nickname_devices_set_nickname_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices/set_uvc_control": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set a UVC control */
        post: operations["set_uvc_control_devices_set_uvc_control_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices/set_leader": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set a device as a leader */
        post: operations["set_leader_devices_set_leader_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices/remove_leader": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove a device as a leader */
        post: operations["remove_leader_devices_remove_leader_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/devices/restart_stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restart a stream */
        post: operations["restart_stream_devices_restart_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Preferences */
        get: operations["get_preferences_preferences_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preferences/save_preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Preferences */
        post: operations["set_preferences_preferences_save_preferences_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/preferences/get_recommended_host": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Recommended Host */
        get: operations["get_recommended_host_preferences_get_recommended_host_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restart the system */
        post: operations["restart_system_restart_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/shutdown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Shutdown the system */
        post: operations["shutdown_system_shutdown_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Lights */
        get: operations["get_lights_lights_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/lights/set_intensity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set Intensity */
        post: operations["set_intensity_lights_set_intensity_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Logs */
        get: operations["get_logs_logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get supported features */
        get: operations["_lambda__features_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccessPoint */
        AccessPoint: {
            /** Ssid */
            ssid: string;
            /** Strength */
            strength: number;
            /** Requires Password */
            requires_password: boolean;
        };
        /** CameraModel */
        CameraModel: {
            /** Path */
            path: string;
            /** Formats */
            formats: {
                [key: string]: components["schemas"]["FormatSizeModel"][];
            };
        };
        /** Connection */
        Connection: {
            /** Id */
            id?: string | null;
            /** Type */
            type?: string | null;
        };
        /** ControlFlagsModel */
        ControlFlagsModel: {
            /** Default Value */
            default_value: number;
            /** Max Value */
            max_value: number;
            /** Min Value */
            min_value: number;
            /** Step */
            step: number;
            control_type: components["schemas"]["ControlTypeEnum"];
            /** Menu */
            menu?: components["schemas"]["MenuItemModel"][];
        };
        /** ControlModel */
        ControlModel: {
            flags: components["schemas"]["ControlFlagsModel"];
            /** Control Id */
            control_id: number;
            /** Name */
            name: string;
            /** Value */
            value: number;
        };
        /**
         * ControlTypeEnum
         * @enum {integer}
         */
        ControlTypeEnum: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;
        /** DeviceDescriptorModel */
        DeviceDescriptorModel: {
            /** Bus Info */
            bus_info: string;
        };
        /** DeviceInfoModel */
        DeviceInfoModel: {
            /** Device Name */
            device_name: string;
            /** Bus Info */
            bus_info: string;
            /** Device Paths */
            device_paths: string[];
            /** Vid */
            vid: number;
            /** Pid */
            pid: number;
        };
        /** DeviceLeaderModel */
        DeviceLeaderModel: {
            /** Follower */
            follower: string;
            /** Leader */
            leader?: string | null;
        };
        /** DeviceModel */
        DeviceModel: {
            /** Cameras */
            cameras?: components["schemas"]["CameraModel"][] | null;
            /** Controls */
            controls: components["schemas"]["ControlModel"][];
            stream: components["schemas"]["StreamModel"];
            /** Name */
            name?: string | null;
            /** Vid */
            vid: number;
            /** Pid */
            pid: number;
            /** Bus Info */
            bus_info: string;
            /** Manufacturer */
            manufacturer?: string | null;
            /** Nickname */
            nickname: string;
            device_info?: components["schemas"]["DeviceInfoModel"] | null;
            device_type: components["schemas"]["DeviceType"];
            /** Is Leader */
            is_leader?: boolean | null;
            /** Leader */
            leader?: string | null;
            /** Follower */
            follower?: string | null;
        };
        /** DeviceNicknameModel */
        DeviceNicknameModel: {
            /** Bus Info */
            bus_info: string;
            /** Nickname */
            nickname: string;
        };
        /**
         * DeviceType
         * @description Device type Enum
         * @enum {integer}
         */
        DeviceType: 0 | 1 | 2;
        /** FeatureSupport */
        FeatureSupport: {
            /** Ttyd */
            ttyd: boolean;
            /** Wifi */
            wifi: boolean;
        };
        /** FormatSizeModel */
        FormatSizeModel: {
            /** Width */
            width: number;
            /** Height */
            height: number;
            /** Intervals */
            intervals: components["schemas"]["IntervalModel"][];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** IPConfiguration */
        IPConfiguration: {
            /**
             * Static Ip
             * @default
             */
            static_ip: string | null;
            /**
             * Gateway
             * @default
             */
            gateway: string | null;
            /**
             * Prefix
             * @default 24
             */
            prefix: number | null;
            /** @default STATIC */
            ip_type: components["schemas"]["IPType"] | null;
            /** Dns */
            dns?: string[] | null;
        };
        /**
         * IPType
         * @enum {string}
         */
        IPType: "STATIC" | "DYNAMIC";
        /** IntervalModel */
        IntervalModel: {
            /** Numerator */
            numerator: number;
            /** Denominator */
            denominator: number;
        };
        /** Light */
        Light: {
            /** Intensity */
            intensity: number;
            /** Pin */
            pin: number;
            /** Nickname */
            nickname: string;
            /** Controller Index */
            controller_index: number;
            /** Controller Name */
            controller_name: string;
        };
        /** LogSchema */
        LogSchema: {
            /** Timestamp */
            timestamp: string;
            /** Level */
            level: string;
            /** Name */
            name: string;
            /** Filename */
            filename: string;
            /** Lineno */
            lineno: number;
            /** Function */
            function: string;
            /** Message */
            message: string;
        };
        /** MenuItemModel */
        MenuItemModel: {
            /** Index */
            index: number;
            /** Name */
            name: string;
        };
        /** NetworkConfig */
        NetworkConfig: {
            /** Ssid */
            ssid: string;
            /** Password */
            password?: string | null;
        };
        /**
         * NetworkPriority
         * @enum {string}
         */
        NetworkPriority: "ETHERNET" | "WIRELESS";
        /** NetworkPriorityInformation */
        NetworkPriorityInformation: {
            network_priority: components["schemas"]["NetworkPriority"];
        };
        /** SavedPreferencesModel */
        SavedPreferencesModel: {
            /** @default {
             *       "host": "192.168.2.1",
             *       "port": 5600
             *     } */
            default_stream: components["schemas"]["StreamEndpointModel"] | null;
            /**
             * Suggest Host
             * @default true
             */
            suggest_host: boolean;
        };
        /** SetLightInfo */
        SetLightInfo: {
            /** Index */
            index: number;
            /** Intensity */
            intensity: number;
        };
        /** Status */
        Status: {
            connection?: components["schemas"]["Connection"] | null;
            /**
             * Finished First Scan
             * @default false
             */
            finished_first_scan: boolean;
            /**
             * Connected
             * @default false
             */
            connected: boolean;
        };
        /**
         * StreamEncodeTypeEnum
         * @enum {string}
         */
        StreamEncodeTypeEnum: "MJPG" | "H264" | "SOFTWARE_H264";
        /** StreamEndpointModel */
        StreamEndpointModel: {
            /** Host */
            host: string;
            /** Port */
            port: number;
        };
        /** StreamFormatModel */
        StreamFormatModel: {
            /** Width */
            width: number;
            /** Height */
            height: number;
            interval: components["schemas"]["IntervalModel"];
        };
        /** StreamInfoModel */
        StreamInfoModel: {
            /** Bus Info */
            bus_info: string;
            stream_format: components["schemas"]["StreamFormatModel"];
            encode_type: components["schemas"]["StreamEncodeTypeEnum"];
            /** Endpoints */
            endpoints: components["schemas"]["StreamEndpointModel"][];
        };
        /** StreamModel */
        StreamModel: {
            /** Device Path */
            device_path: string;
            encode_type: components["schemas"]["StreamEncodeTypeEnum"];
            stream_type: components["schemas"]["StreamTypeEnum"];
            /** Endpoints */
            endpoints: components["schemas"]["StreamEndpointModel"][];
            /** Width */
            width: number;
            /** Height */
            height: number;
            interval: components["schemas"]["IntervalModel"];
            /** Configured */
            configured: boolean;
        };
        /**
         * StreamTypeEnum
         * @enum {string}
         */
        StreamTypeEnum: "UDP";
        /** UVCControlModel */
        UVCControlModel: {
            /** Bus Info */
            bus_info: string;
            /** Control Id */
            control_id: number;
            /** Value */
            value: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    wifi_status_wifi_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
    access_points_wifi_access_points_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessPoint"][];
                };
            };
        };
    };
    list_wifi_connections_wifi_connections_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Connection"][];
                };
            };
        };
    };
    connect_wifi_connect_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NetworkConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    disconnect_wifi_disconnect_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    forget_wifi_forget_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NetworkConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ip_configuration_wired_get_ip_configuration_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IPConfiguration"];
                };
            };
        };
    };
    set_static_ip_wired_set_ip_configuration_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IPConfiguration"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_network_priority_wired_set_network_priority_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NetworkPriorityInformation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    getet_network_priority_wired_get_network_priority_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NetworkPriorityInformation"];
                };
            };
        };
    };
    get_devices_devices_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceModel"][];
                };
            };
        };
    };
    configure_stream_devices_configure_stream_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StreamInfoModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unconfigure_stream_devices_unconfigure_stream_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeviceDescriptorModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_nickname_devices_set_nickname_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeviceNicknameModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_uvc_control_devices_set_uvc_control_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UVCControlModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_leader_devices_set_leader_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeviceLeaderModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_leader_devices_remove_leader_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeviceLeaderModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    restart_stream_devices_restart_stream_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeviceDescriptorModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_preferences_preferences_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SavedPreferencesModel"];
                };
            };
        };
    };
    set_preferences_preferences_save_preferences_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SavedPreferencesModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_recommended_host_preferences_get_recommended_host_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    restart_system_restart_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    shutdown_system_shutdown_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_lights_lights_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Light"][];
                };
            };
        };
    };
    set_intensity_lights_set_intensity_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetLightInfo"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_logs_logs_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LogSchema"][];
                };
            };
        };
    };
    _lambda__features_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeatureSupport"];
                };
            };
        };
    };
}
